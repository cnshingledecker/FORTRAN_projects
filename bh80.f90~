MODULE bh80
  IMPLICIT NONE

  REAL, PARAMETER :: Z1=1.
  REAL, PARAMETER :: Z2=8.
  REAL, PARAMETER :: RHO =2.86E22 !in cm^-3
  REAL, PARAMETER :: ENERG =100*1E3 !1.602E-14 !in Joules
  REAL, PARAMETER :: PI=3.14159
  REAL, PARAMETER :: M1=1 !1.66E-24 !1 amu in grams
    REAL, PARAMETER :: M2=32*M1 !16-O in grams
    REAL, PARAMETER :: A0=0.579E-8 !Bohr radius in cm
    REAL, PARAMETER :: ECHARG =-4.8E-10 !Electron charge in statC

    CONTAINS

      SUBROUTINE magic(eps,b,c2,s2,theta)
        IMPLICIT NONE

        !Data dictionary: Calling Parameters and Output
        REAL, INTENT(IN)  :: eps
        REAL, INTENT(IN)  :: b
        REAL, INTENT(OUT) :: c2,s2
        REAL, INTENT(OUT) :: theta

        !Data dictionary: Local Variables
        REAL              :: r, rr
        REAL              :: ex1,ex2,ex3,ex4
        REAL              :: v,v1
        REAL              :: fr,fr1
        REAL              :: q
        REAL              :: roc
        REAL              :: sqe
        REAL              :: cc,aa,ff
        REAL              :: delta
        REAL              :: co

        r     = b
        rr    = -2.7*ALOG(eps*b)
        IF ( rr .LT. b ) GOTO 1980
        rr    = -2.7*ALOG(eps*b)
        IF ( rr .LT. b ) GOTO 1980
        r     = rr
!        PRINT *, 'The value of r is',r
  1980  ex1   =  0.18175*EXP(-3.1998*r)
        ex2   =  0.50986*EXP(-0.94229*r)
        ex3   =  0.28022*EXP(-0.4029*r)
        ex4   = 0.028171*EXP(-0.20162*r)
        v     = (ex1 + ex2 + ex3 + ex4)/r
        v1    = -(v+3.1998*ex1+0.94229*ex2+0.4029*ex3+0.20162*ex4)/r
        fr    = b*b/r+v*r/eps-r
        fr1   = -b*b/(r*r)+(v+v1*r)/eps-1.0
        q     = fr/fr1
        r     = r-q
        IF ( ABS(q/r) .GT. 0.001) GOTO 1980
        roc   = -2.0*(eps-v)/v1
        sqe   = SQRT(eps)
        cc    = (0.011615+sqe)/(0.0071222+sqe)
        aa    = 2.0*eps*(1.0+(0.99229/sqe))*b**cc
        ff    = (SQRT(aa**2+1.0)-aa)*((9.3066+eps)/(14.813+eps))
        delta = (r-b)*aa*ff/(ff+1.0)
        co    = (b+delta+roc)/(r+roc)
        c2    = co*co
        s2    = 1.0-c2
        theta = 2.0*ACOS(co)
        RETURN
      END SUBROUTINE magic

      FUNCTION b(rn,a,rho)
        IMPLICIT NONE

        !Data dictionary: Calling parameters
        REAL, INTENT(IN) :: rn 
        REAL, INTENT(IN) :: rho
        REAL, INTENT(IN) :: a
        REAL             :: b

        !Data dictionary: Local variables
        REAL             :: p

        p = SQRT(rn/(3.14159*(rho**(2./3.))))
        b = p/a
!        PRINT *, 'The value of b is',b
        RETURN
      END FUNCTION b

      FUNCTION au(z1,z2)
        IMPLICIT NONE

        !Data dictionary: Calling parameters
        REAL, INTENT(IN) :: z1,z2
        REAL             :: au

        au = (0.8853*A0)/((z1**(2./3.)) + (z2**(2./3.)))
!        PRINT *, 'The screening length is',au
        RETURN
      END FUNCTION au

      FUNCTION eps(en,z1,z2,m1,m2)
        !Note: All units must be Gaussian-CGS
        IMPLICIT NONE

        !Data dictionary: Calling parameters
        REAL, INTENT(IN) :: en 
        REAL, INTENT(IN) :: z1,z2
        REAL, INTENT(IN) :: m1,m2
        REAL             :: eps


        !Data dictionary: Local variables
        REAL             :: num
        REAL             :: den1,den2,den

        num = 32.53*m2*en
        den1 = z1*z2*(m1+m2)
        den2 = z1**0.23 + z2**0.23
        den = den1*den2
        eps = num/den
!        eps = (a*en)/(z1*z2*ECHARG*ECHARG)
!      PRINT *, 'The reduced energy is',eps
      END FUNCTION eps

    FUNCTION mass_fac(m1,m2)
      IMPLICIT NONE

      !Data dictionary: Calling parameters
      REAL, INTENT(IN) :: m1,m2
      REAL             :: mass_fac

!      PRINT *, 'Mass 1 is',M1,'and mass 2 is',M2
      mass_fac = (4.*m1*m2)/((m1+m2)**2)
!      PRINT *, 'The mass factor is',mass_fac
      RETURN
    END FUNCTION mass_fac

    FUNCTION t(e,mf,s2)
      IMPLICIT NONE

      !Data dictionary: Calling parameters
      REAL, INTENT(IN) :: e
      REAL, INTENT(IN) :: mf
      REAL, INTENT(IN) :: s2
      REAL             :: t

      t = mf*e*s2
      RETURN
    END FUNCTION t

    FUNCTION lab_theta(cmtheta,m1,m2)
      IMPLICIT NONE

      !Data dictionary: Calling parameters
      REAL, INTENT(IN) :: cmtheta
      REAL, INTENT(IN) :: m1,m2
      REAL             :: lab_theta

      !Data dictionary: Local variables
      REAL             :: insides

      insides = SIN(cmtheta)/(COS(cmtheta)+(m1/m2))
      lab_theta = ATAN(insides)
      RETURN
    END FUNCTION lab_theta

END MODULE bh80
